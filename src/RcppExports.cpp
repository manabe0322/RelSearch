// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// split
std::vector<std::string> split(std::string str, const char* del);
RcppExport SEXP _relsearch_split(SEXP strSEXP, SEXP delSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< const char* >::type del(delSEXP);
    rcpp_result_gen = Rcpp::wrap(split(str, del));
    return rcpp_result_gen;
END_RCPP
}
// str_to_int
int str_to_int(std::string str);
RcppExport SEXP _relsearch_str_to_int(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(str_to_int(str));
    return rcpp_result_gen;
END_RCPP
}
// int_to_str
std::string int_to_str(int num);
RcppExport SEXP _relsearch_int_to_str(SEXP numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    rcpp_result_gen = Rcpp::wrap(int_to_str(num));
    return rcpp_result_gen;
END_RCPP
}
// tousa
std::vector<int> tousa(int start, int end, int interval);
RcppExport SEXP _relsearch_tousa(SEXP startSEXP, SEXP endSEXP, SEXP intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< int >::type interval(intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(tousa(start, end, interval));
    return rcpp_result_gen;
END_RCPP
}
// search_pos_double
int search_pos_double(std::vector<double> vec, double target);
RcppExport SEXP _relsearch_search_pos_double(SEXP vecSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(search_pos_double(vec, target));
    return rcpp_result_gen;
END_RCPP
}
// search_pos_int
int search_pos_int(std::vector<int> vec, int target);
RcppExport SEXP _relsearch_search_pos_int(SEXP vecSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(search_pos_int(vec, target));
    return rcpp_result_gen;
END_RCPP
}
// extract_pos_mt
std::vector<int> extract_pos_mt(std::string range);
RcppExport SEXP _relsearch_extract_pos_mt(SEXP rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type range(rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_pos_mt(range));
    return rcpp_result_gen;
END_RCPP
}
// extract_pos_mt_qr
std::vector<int> extract_pos_mt_qr(std::string ran_q, std::string ran_r);
RcppExport SEXP _relsearch_extract_pos_mt_qr(SEXP ran_qSEXP, SEXP ran_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type ran_q(ran_qSEXP);
    Rcpp::traits::input_parameter< std::string >::type ran_r(ran_rSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_pos_mt_qr(ran_q, ran_r));
    return rcpp_result_gen;
END_RCPP
}
// make_share_range
std::string make_share_range(std::vector<int> pos_mt_qr);
RcppExport SEXP _relsearch_make_share_range(SEXP pos_mt_qrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type pos_mt_qr(pos_mt_qrSEXP);
    rcpp_result_gen = Rcpp::wrap(make_share_range(pos_mt_qr));
    return rcpp_result_gen;
END_RCPP
}
// calc_kin_like
std::vector<double> calc_kin_like(std::vector<double> qgt, std::vector<double> rgt, std::vector<double> af, std::vector<double> af_al, std::vector<double> pibd, bool cons_mu, double myu, double ape);
RcppExport SEXP _relsearch_calc_kin_like(SEXP qgtSEXP, SEXP rgtSEXP, SEXP afSEXP, SEXP af_alSEXP, SEXP pibdSEXP, SEXP cons_muSEXP, SEXP myuSEXP, SEXP apeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type qgt(qgtSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rgt(rgtSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type af(afSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type af_al(af_alSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type pibd(pibdSEXP);
    Rcpp::traits::input_parameter< bool >::type cons_mu(cons_muSEXP);
    Rcpp::traits::input_parameter< double >::type myu(myuSEXP);
    Rcpp::traits::input_parameter< double >::type ape(apeSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_kin_like(qgt, rgt, af, af_al, pibd, cons_mu, myu, ape));
    return rcpp_result_gen;
END_RCPP
}
// make_dummy_af
std::vector<std::vector<double>> make_dummy_af(std::vector<std::vector<double>> dummy_gt, std::vector<double> af, std::vector<double> af_al);
RcppExport SEXP _relsearch_make_dummy_af(SEXP dummy_gtSEXP, SEXP afSEXP, SEXP af_alSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type dummy_gt(dummy_gtSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type af(afSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type af_al(af_alSEXP);
    rcpp_result_gen = Rcpp::wrap(make_dummy_af(dummy_gt, af, af_al));
    return rcpp_result_gen;
END_RCPP
}
// make_dummy_gt
std::vector<std::vector<double>> make_dummy_gt(std::vector<double> qgt, std::vector<double> rgt);
RcppExport SEXP _relsearch_make_dummy_gt(SEXP qgtSEXP, SEXP rgtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type qgt(qgtSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rgt(rgtSEXP);
    rcpp_result_gen = Rcpp::wrap(make_dummy_gt(qgt, rgt));
    return rcpp_result_gen;
END_RCPP
}
// calc_kin_like_drop
std::vector<double> calc_kin_like_drop(std::vector<double> qgt, std::vector<double> rgt, std::vector<double> af, std::vector<double> af_al, std::vector<double> pibd, bool cons_mu, double myu, double ape, double pd);
RcppExport SEXP _relsearch_calc_kin_like_drop(SEXP qgtSEXP, SEXP rgtSEXP, SEXP afSEXP, SEXP af_alSEXP, SEXP pibdSEXP, SEXP cons_muSEXP, SEXP myuSEXP, SEXP apeSEXP, SEXP pdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type qgt(qgtSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rgt(rgtSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type af(afSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type af_al(af_alSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type pibd(pibdSEXP);
    Rcpp::traits::input_parameter< bool >::type cons_mu(cons_muSEXP);
    Rcpp::traits::input_parameter< double >::type myu(myuSEXP);
    Rcpp::traits::input_parameter< double >::type ape(apeSEXP);
    Rcpp::traits::input_parameter< double >::type pd(pdSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_kin_like_drop(qgt, rgt, af, af_al, pibd, cons_mu, myu, ape, pd));
    return rcpp_result_gen;
END_RCPP
}
// calc_kin_lr
std::vector<std::vector<double>> calc_kin_lr(std::vector<double> query, std::vector<double> ref, std::vector<std::vector<double>> af_list, std::vector<std::vector<double>> af_al_list, std::vector<double> pibd, bool cons_mu, std::vector<double> myus, std::vector<double> apes, int meth_d, double pd);
RcppExport SEXP _relsearch_calc_kin_lr(SEXP querySEXP, SEXP refSEXP, SEXP af_listSEXP, SEXP af_al_listSEXP, SEXP pibdSEXP, SEXP cons_muSEXP, SEXP myusSEXP, SEXP apesSEXP, SEXP meth_dSEXP, SEXP pdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ref(refSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type af_list(af_listSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type af_al_list(af_al_listSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type pibd(pibdSEXP);
    Rcpp::traits::input_parameter< bool >::type cons_mu(cons_muSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type myus(myusSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type apes(apesSEXP);
    Rcpp::traits::input_parameter< int >::type meth_d(meth_dSEXP);
    Rcpp::traits::input_parameter< double >::type pd(pdSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_kin_lr(query, ref, af_list, af_al_list, pibd, cons_mu, myus, apes, meth_d, pd));
    return rcpp_result_gen;
END_RCPP
}
// obtain_al
std::vector<double> obtain_al(std::string hap);
RcppExport SEXP _relsearch_obtain_al(SEXP hapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type hap(hapSEXP);
    rcpp_result_gen = Rcpp::wrap(obtain_al(hap));
    return rcpp_result_gen;
END_RCPP
}
// is_integer
bool is_integer(double x);
RcppExport SEXP _relsearch_is_integer(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_integer(x));
    return rcpp_result_gen;
END_RCPP
}
// calc_mu_step
int calc_mu_step(std::vector<double> q_al, std::vector<double> r_al);
RcppExport SEXP _relsearch_calc_mu_step(SEXP q_alSEXP, SEXP r_alSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type q_al(q_alSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type r_al(r_alSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_mu_step(q_al, r_al));
    return rcpp_result_gen;
END_RCPP
}
// match_y
std::vector<std::vector<int>> match_y(std::vector<std::string> query, std::vector<std::string> ref);
RcppExport SEXP _relsearch_match_y(SEXP querySEXP, SEXP refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type ref(refSEXP);
    rcpp_result_gen = Rcpp::wrap(match_y(query, ref));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_relsearch_split", (DL_FUNC) &_relsearch_split, 2},
    {"_relsearch_str_to_int", (DL_FUNC) &_relsearch_str_to_int, 1},
    {"_relsearch_int_to_str", (DL_FUNC) &_relsearch_int_to_str, 1},
    {"_relsearch_tousa", (DL_FUNC) &_relsearch_tousa, 3},
    {"_relsearch_search_pos_double", (DL_FUNC) &_relsearch_search_pos_double, 2},
    {"_relsearch_search_pos_int", (DL_FUNC) &_relsearch_search_pos_int, 2},
    {"_relsearch_extract_pos_mt", (DL_FUNC) &_relsearch_extract_pos_mt, 1},
    {"_relsearch_extract_pos_mt_qr", (DL_FUNC) &_relsearch_extract_pos_mt_qr, 2},
    {"_relsearch_make_share_range", (DL_FUNC) &_relsearch_make_share_range, 1},
    {"_relsearch_calc_kin_like", (DL_FUNC) &_relsearch_calc_kin_like, 8},
    {"_relsearch_make_dummy_af", (DL_FUNC) &_relsearch_make_dummy_af, 3},
    {"_relsearch_make_dummy_gt", (DL_FUNC) &_relsearch_make_dummy_gt, 2},
    {"_relsearch_calc_kin_like_drop", (DL_FUNC) &_relsearch_calc_kin_like_drop, 9},
    {"_relsearch_calc_kin_lr", (DL_FUNC) &_relsearch_calc_kin_lr, 10},
    {"_relsearch_obtain_al", (DL_FUNC) &_relsearch_obtain_al, 1},
    {"_relsearch_is_integer", (DL_FUNC) &_relsearch_is_integer, 1},
    {"_relsearch_calc_mu_step", (DL_FUNC) &_relsearch_calc_mu_step, 2},
    {"_relsearch_match_y", (DL_FUNC) &_relsearch_match_y, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_relsearch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
