// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// split
std::vector<std::string> split(std::string str, const char* del);
RcppExport SEXP _relsearch_split(SEXP strSEXP, SEXP delSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< const char* >::type del(delSEXP);
    rcpp_result_gen = Rcpp::wrap(split(str, del));
    return rcpp_result_gen;
END_RCPP
}
// str_to_int
int str_to_int(std::string str);
RcppExport SEXP _relsearch_str_to_int(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(str_to_int(str));
    return rcpp_result_gen;
END_RCPP
}
// tousa
std::vector<int> tousa(int start, int end, int interval);
RcppExport SEXP _relsearch_tousa(SEXP startSEXP, SEXP endSEXP, SEXP intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< int >::type interval(intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(tousa(start, end, interval));
    return rcpp_result_gen;
END_RCPP
}
// searchPos
int searchPos(NumericVector vec, double target);
RcppExport SEXP _relsearch_searchPos(SEXP vecSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(searchPos(vec, target));
    return rcpp_result_gen;
END_RCPP
}
// extPosMt
std::vector<int> extPosMt(std::string range);
RcppExport SEXP _relsearch_extPosMt(SEXP rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type range(rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(extPosMt(range));
    return rcpp_result_gen;
END_RCPP
}
// testPosMt
std::vector<int> testPosMt(std::vector<int> fromto);
RcppExport SEXP _relsearch_testPosMt(SEXP fromtoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type fromto(fromtoSEXP);
    rcpp_result_gen = Rcpp::wrap(testPosMt(fromto));
    return rcpp_result_gen;
END_RCPP
}
// kinLike
NumericVector kinLike(NumericVector qgt, NumericVector rgt, NumericVector af, NumericVector afAl, NumericVector probIBD, bool consMu, double myu, double ape);
RcppExport SEXP _relsearch_kinLike(SEXP qgtSEXP, SEXP rgtSEXP, SEXP afSEXP, SEXP afAlSEXP, SEXP probIBDSEXP, SEXP consMuSEXP, SEXP myuSEXP, SEXP apeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type qgt(qgtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rgt(rgtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type af(afSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type afAl(afAlSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probIBD(probIBDSEXP);
    Rcpp::traits::input_parameter< bool >::type consMu(consMuSEXP);
    Rcpp::traits::input_parameter< double >::type myu(myuSEXP);
    Rcpp::traits::input_parameter< double >::type ape(apeSEXP);
    rcpp_result_gen = Rcpp::wrap(kinLike(qgt, rgt, af, afAl, probIBD, consMu, myu, ape));
    return rcpp_result_gen;
END_RCPP
}
// makeDummyAf
NumericMatrix makeDummyAf(NumericMatrix dummyGt, NumericVector af, NumericVector afAl);
RcppExport SEXP _relsearch_makeDummyAf(SEXP dummyGtSEXP, SEXP afSEXP, SEXP afAlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dummyGt(dummyGtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type af(afSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type afAl(afAlSEXP);
    rcpp_result_gen = Rcpp::wrap(makeDummyAf(dummyGt, af, afAl));
    return rcpp_result_gen;
END_RCPP
}
// makeDummyGt
NumericMatrix makeDummyGt(NumericVector qgt, NumericVector rgt);
RcppExport SEXP _relsearch_makeDummyGt(SEXP qgtSEXP, SEXP rgtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type qgt(qgtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rgt(rgtSEXP);
    rcpp_result_gen = Rcpp::wrap(makeDummyGt(qgt, rgt));
    return rcpp_result_gen;
END_RCPP
}
// kinLikeDrop
NumericVector kinLikeDrop(NumericVector qgt, NumericVector rgt, NumericVector af, NumericVector afAl, NumericVector probIBD, bool consMu, double myu, double ape, double pd);
RcppExport SEXP _relsearch_kinLikeDrop(SEXP qgtSEXP, SEXP rgtSEXP, SEXP afSEXP, SEXP afAlSEXP, SEXP probIBDSEXP, SEXP consMuSEXP, SEXP myuSEXP, SEXP apeSEXP, SEXP pdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type qgt(qgtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rgt(rgtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type af(afSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type afAl(afAlSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probIBD(probIBDSEXP);
    Rcpp::traits::input_parameter< bool >::type consMu(consMuSEXP);
    Rcpp::traits::input_parameter< double >::type myu(myuSEXP);
    Rcpp::traits::input_parameter< double >::type ape(apeSEXP);
    Rcpp::traits::input_parameter< double >::type pd(pdSEXP);
    rcpp_result_gen = Rcpp::wrap(kinLikeDrop(qgt, rgt, af, afAl, probIBD, consMu, myu, ape, pd));
    return rcpp_result_gen;
END_RCPP
}
// calcKinLr
NumericMatrix calcKinLr(NumericVector query, NumericVector ref, List afList, List afAlList, NumericVector probIBD, bool consMu, NumericVector myuAll, NumericVector apeAll, int dropMethStr, double pd);
RcppExport SEXP _relsearch_calcKinLr(SEXP querySEXP, SEXP refSEXP, SEXP afListSEXP, SEXP afAlListSEXP, SEXP probIBDSEXP, SEXP consMuSEXP, SEXP myuAllSEXP, SEXP apeAllSEXP, SEXP dropMethStrSEXP, SEXP pdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type query(querySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref(refSEXP);
    Rcpp::traits::input_parameter< List >::type afList(afListSEXP);
    Rcpp::traits::input_parameter< List >::type afAlList(afAlListSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probIBD(probIBDSEXP);
    Rcpp::traits::input_parameter< bool >::type consMu(consMuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type myuAll(myuAllSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type apeAll(apeAllSEXP);
    Rcpp::traits::input_parameter< int >::type dropMethStr(dropMethStrSEXP);
    Rcpp::traits::input_parameter< double >::type pd(pdSEXP);
    rcpp_result_gen = Rcpp::wrap(calcKinLr(query, ref, afList, afAlList, probIBD, consMu, myuAll, apeAll, dropMethStr, pd));
    return rcpp_result_gen;
END_RCPP
}
// obtainAl
NumericVector obtainAl(std::string hap);
RcppExport SEXP _relsearch_obtainAl(SEXP hapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type hap(hapSEXP);
    rcpp_result_gen = Rcpp::wrap(obtainAl(hap));
    return rcpp_result_gen;
END_RCPP
}
// is_integer
bool is_integer(double x);
RcppExport SEXP _relsearch_is_integer(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_integer(x));
    return rcpp_result_gen;
END_RCPP
}
// calcMuStep
int calcMuStep(NumericVector qAl, NumericVector rAl);
RcppExport SEXP _relsearch_calcMuStep(SEXP qAlSEXP, SEXP rAlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type qAl(qAlSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rAl(rAlSEXP);
    rcpp_result_gen = Rcpp::wrap(calcMuStep(qAl, rAl));
    return rcpp_result_gen;
END_RCPP
}
// matchY
IntegerMatrix matchY(CharacterVector qHap, CharacterVector rHap);
RcppExport SEXP _relsearch_matchY(SEXP qHapSEXP, SEXP rHapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type qHap(qHapSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type rHap(rHapSEXP);
    rcpp_result_gen = Rcpp::wrap(matchY(qHap, rHap));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_relsearch_split", (DL_FUNC) &_relsearch_split, 2},
    {"_relsearch_str_to_int", (DL_FUNC) &_relsearch_str_to_int, 1},
    {"_relsearch_tousa", (DL_FUNC) &_relsearch_tousa, 3},
    {"_relsearch_searchPos", (DL_FUNC) &_relsearch_searchPos, 2},
    {"_relsearch_extPosMt", (DL_FUNC) &_relsearch_extPosMt, 1},
    {"_relsearch_testPosMt", (DL_FUNC) &_relsearch_testPosMt, 1},
    {"_relsearch_kinLike", (DL_FUNC) &_relsearch_kinLike, 8},
    {"_relsearch_makeDummyAf", (DL_FUNC) &_relsearch_makeDummyAf, 3},
    {"_relsearch_makeDummyGt", (DL_FUNC) &_relsearch_makeDummyGt, 2},
    {"_relsearch_kinLikeDrop", (DL_FUNC) &_relsearch_kinLikeDrop, 9},
    {"_relsearch_calcKinLr", (DL_FUNC) &_relsearch_calcKinLr, 10},
    {"_relsearch_obtainAl", (DL_FUNC) &_relsearch_obtainAl, 1},
    {"_relsearch_is_integer", (DL_FUNC) &_relsearch_is_integer, 1},
    {"_relsearch_calcMuStep", (DL_FUNC) &_relsearch_calcMuStep, 2},
    {"_relsearch_matchY", (DL_FUNC) &_relsearch_matchY, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_relsearch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
